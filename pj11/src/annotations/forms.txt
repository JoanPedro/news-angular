Template Forms:

  <form (ngSubmit)="onSubmit(form)" #form="ngForm">
    ...
    ...
    <button class="btn btn-primary" type="submit">Submit</button>
  </form>

  - É importante que todos dados que precisam ser persistidos no objeto a ser criado
    devem estar com a diretiva "ngModel":
      Ex. <input ngModel> </input>
      - Isso permitirá que o Angular consiga identificar e realizar o binding do dado.
  - Pelo formato padrão de "TEMPLATE FORM" do Angular, não é necessário realizar o
    handle do evento (click) no botão de submit;
  - Ao invés dessa abordagem, o Angular possui uma abordem em cima da tag "FORM"
    - Toda vez que submetida, é gerado um evento/dado
    - O Angular possui um "build-in" template-form para a tag "form" que é possível
      justamente interceptar o dado submetido por meio do "Template literal" (#nomeQualquer)
        Ex. <form (ngSubmit)="onSubmit(f)" #f="ngForm"></form>"
    - Desta forma, o método "onSubmit" irá receber um parâmetro do tipo "NgForm" que criará
      um objeto default que representa o formulário submetido dentro da propriedade "value"
        Ex.
          onSubmit(form: NgForm) {
            const formValue: SimpleForm = form.value;
            console.log(formValue)
          }

          export type SimpleForm = {
            email: String,
            secret: String,
            username: String
          }

        Desta forma, o valor exibido será do tipo "SimpleForm".

- Default value:
  Ex.
    <select
      id="secret"
      class="form-control"
      [ngModel]="defaultQuestion"
      name="secret"
    >
      <option value="pet">Your first Pet?</option>
      <option value="teacher">Your first teacher?</option>
    </select>
  - É importante notar o One-Way binding do ngModel -> [ngModel], ele que realizará o parse
    informação. No caso da tag 'select', o valor atribuído poderia ser simplesmente um dos
    valores contidos nas options: 1. [ngModel]="'pet'" ou [ngModel]="'teacher'".
  - No caso exemplo, o componente.TS possui uma propriedade que encapsula isso.

- Display some input test by two-way data binding:
  Ex.
    <div class="form-group">
      <textarea
        name="questionAnswer"
        rows="3"
        class="form-control"
        [(ngModel)]="answer"
      ></textarea>
    </div>
    <p>Your reply: {{ answer }}</p>
  - É importante verificar o Two-Way Binding (Event + Property) => [(ngModel)]="answer"
    1. No componenteTS é necessário declarar a propriedade 'answer'
    2. No template HTML, acessar o dado via templateString => {{ answer }}

!IMPORTANT ngModel FORMS:
  - Três formas:
    1. No Binding: Somente dizer ao angular que por exemplo, que um input é somente um controle;
      e para realizar o controle do formulário: ngModel
    2. One-Way Binding: Para fornecer ao controlador um valor padrão: [ngModel] = "..."
    3. Two-Way Binding: Para fornecer instantâneamente uma saída para o controle ou fazer
      o que você equiser com o valor.

- Agrupando dados e construindo objetos via Template Forms:
  <form (ngSubmit)="onSubmit()" #formObject="ngForm">
    <div id="user-data" ngModelGroup="userData" #userData="ngModelGroup"> ... <div/>
    <div id="user-details" ngModelGroup="userDetails" #userDatails="ngModelGroup"> ... <div/>
  </form>

  - Com a diretiva: 'ngModelGroup', ao submeter esse formulário, o ngForm.value terá construído
    um objeto mais inteligente, sendo a chave do objeto de nome igual ao definido na diretiva
    ngModelGroup.
  - É possível acessar um Grupo via referência local e/ou (exemplo) @ViewChield('userData')
  - Dessa forma é possível verificar se um groupo de controle é totalmente VÁLIDO, por exemplo,
    e não somente uma entrada em específico.
  E fazer coisas do tipo:
    Ex. <p *ngIf="!userData.valid && userData.touched">User Data is invalid</p>
    userData -> É a referência local #userData
