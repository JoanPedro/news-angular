1 - Componentes: São indentificados com a anotação @Component em classes.

  // ---------------------------------- //
  Exemplo:

  @Component({
    selector: 'app-root',
    templateUrl: './app.component.html',
    styleUrls: ['./app.component.css']
  })
  export class nameOfClass {} ...
  // ---------------------------------- //

  Criando um Component:

    1. Para criar um simples componente é necessário:
      1.1 Uma Classe anotada como @Component; para indicar ao angular sua natureza;
      1.2 Um templete Html; para indicar ao angular qual a instância de view;
      1.3 Não mandatório, mas um arquivo de estilos para o template Html (instância de view).
    2. Com esses três "arquivos" criados (.ts, .html e .css), é necessário registrá-los:
      2.1 selector: É um selector CSS que diz ao Angular para criar e inserir uma instância
            desse componente sempre que encontrar sua respectiva tag correspondente no HTML.
            Como no exemplo, "app-root" -> <app-root></app-root>; o angular sempre irá inserir
            uma instância de visualização de AppComponent. Deve ser uma string única! Não Deve
            existir outro selector de mesmo nome.
              Ex. Pode ser selector por elemento -> selector: 'app-root'
                Uso: <app-root></app-root>
              Ex. Pode ser selector por atributo -> selector: '[app-root]'
                Uso: <div app-root></div>
              Ex. Pode ser selector por classe -> selector: '.app-root'
                Uso: <div class="app-root"></div>
      2.2 templateUrl: Path relativo para o módulo html deste componente. Como alternativa,
            você pode fornecer o modelo HTML embutido, como o valor da propriedade do modelo.
            Este modelo define a visualização do host do componente.
      2.3 styleUrls: Path relativo ao módulo css deste componente. Definide um arquivo de estilo
            exclusivo ao componente em questão; pode ser utilizado por *outros componentes*.

  Criação Automatizada: "ng generate component componentName" (ng g c componentName)
    - Script para criar um component específico em módulo.
    - O Script cria um component default e o registra no módulo em questão. (declarations)

2 - Modules: São utilizados para agrupar diferentes peças (por exemplo, múltiplos componentes).

  - Basicamente informa ao Angular quais funcionalidades o módulo em questão utiliza-ia;
  - Deve-se informar ao angular que um "módulo/component" existe, caso contrário,
    o mesmo não terá efeito.


  // ---------------------------------- //
  Exemplo:

  @NgModule({
    declarations: [
      AppComponent
    ],
    imports: [
      BrowserModule
    ],
    providers: [],
    bootstrap: [AppComponent]
  })
  export class nameOfClass {} ...
  // ---------------------------------- //
