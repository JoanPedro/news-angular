Provido por pacote externo -> RXJS

1. É baseado no padrão Observer como um (Publish - Subscriber)

  - De um lado tem o Observable e o Observer
  - O canal de comunicação é uma stream de dados
  - Utiliza-se o padrão REATIVO

  Obs. Alguns (Grande maioria) dos observable, quando sobrescrito, não são descatados.
    (Quando utiliza o ".Subscriber" em um observable, vc mantem o canal de dados aberto,
      até dizer que é para fechar! Caso contrário, o mesmo continua em execução infinitamente.
      Causando memory leak!)
    Logo, é importante que garanta, caso necessário, sempre o ".unsubscriber" no canal.

  Obs2. Todos os Observables padrões fornecidos pelo ANGULAR, não precisam ser explicidamente
    "unsubscribeble" (DES-Sobrescrito), pois o ANGULAR já possui artifício que cuidam disso
    por debaixo dos panos!

  Observable possui 3 ciclos: Next, Error e Completed
    - Next: Uma função callback para receber notificações do próximo tipo do Observable,
      com um valor. O Observable pode chamar este método 0 ou mais vezes.

    - Error: Retorno de chamada para receber notificações de erro de tipo do Observable,
      com um erro anexado. Notifica o observador de que o observável experimentou uma
      condição de erro. E ele cancela o Observable sem completá-lo.

    - Completed: Uma função callback para receber uma notificação sem valor do tipo completo
      do Observable. Notifica o Observer que o Observable terminou de enviar notificações
      baseadas em push.

- É possível substituir um EventEmitter por um Subject do RXJS!
  - Ao invés de emitir um evento, simplemente chama-se o "next()" no lugar do emit.
  - Com um SUBJECT é possível fazer a chamada do "next()" fora de um OBSERVABLE!
    - Caso Observable, só é possível dentro do context (método)
